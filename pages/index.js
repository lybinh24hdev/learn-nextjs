import Head from 'next/head';
import st from '../styles/home.module.css';
import { useState } from 'react';
import Modal from '../components/Modal';

const G00 = 'G00';
const G01 = 'G01';
const G02 = 'G02';
const props = {
    first: 'First',
    cut: 'Cut',
    last: 'Last',
    returnLast: 'Return Last',
    f1: 'F1',
    f2: 'F2',
};

const isNumber = (value) => typeof value === 'number';

export default function Home() {
    const [form, setForm] = useState({
        first: null,
        cut: null,
        last: null,
        returnLast: null,
        f1: null,
        f2: null,
    });
    const [errors, setErrors] = useState({});
    const [isModalOpen, setModalOpen] = useState(false);

    const generateText = () => {
        // Transform input to result in Array format
        const { first, cut, last, returnLast, f1, f2 } = form;
        const resultArray = [];
        let i = 0;
        let currentG00 = first;

        while (currentG00 > last) {
            resultArray.push({
                [G00]: !i ? first : currentG00 + returnLast,
                [G01]: currentG00 - cut,
                [G02]: first,
            });
            i++;
            currentG00 -= cut;
            if (i > 10000) break;
        }

        // Convert array to string format
        const lines = [];
        resultArray.forEach((obj, index) => {
            for (const key in obj) {
                if (!index) {
                    lines.push(
                        `${key === G02 ? G00 : key} Z${obj[key].toFixed(1).replace(/\.0$/, '.')} ${
                            key === G01 ? f2 : ''
                        }`
                    );
                } else {
                    lines.push(
                        `${key === G00 || key === G01 ? G01 : G00} Z${obj[key].toFixed(1).replace(/\.0$/, '.')} ${
                            key === G00 ? f1 : key === G01 ? f2 : ''
                        }`
                    );
                }
            }
        });

        return lines;
    };

    const handleDownLoad = () => {
        // Validate
        const newErrors = { ...errors };
        let invalid = false;
        Object.keys(form).forEach((key) => {
            if (props[key] === props.f1 || props[key] === props.f2) return;
            if (!isNumber(form[key])) {
                invalid = true;
                newErrors[key] = true;
            }
        });

        setErrors(newErrors);
        if (invalid) return;

        const script = generateText().join('\n');

        // Download .txt file
        const blob = new Blob([script], { type: 'text/plain' });
        const link = document.createElement('a');
        link.download = 'CNC_Script';
        link.href = window.URL.createObjectURL(blob);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(link.href);
    };

    const handleChangeForm = (prop, value) => {
        setForm((prev) => ({
            ...prev,
            [prop]: value,
        }));

        if (errors[prop]) {
            setErrors((prev) => ({ ...prev, [prop]: false }));
        }
    };

    const handleOpenModalPreview = () => {
        setModalOpen(true);
    };

    return (
        <div className={st.container}>
            <Head>
                <title>CNC Script Auto</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className={st.wrapper}>
                <div className={st.header}>
                    <h1 className={st.text}>„Åì„Çì„Å´„Å°„ÅØ„ÄÅMarin∆és Haruki</h1>
                </div>

                <div className={st.main}>
                    <h3>Auto-generate CNC script tool</h3>
                    <div className={st.form}>
                        {Object.keys(props).map((key) => {
                            if (props[key] === props.f1 || props[key] === props.f2) return <></>;
                            return (
                                <div key={key} className={st.inputField}>
                                    <label htmlFor={key}>
                                        {props[key]}
                                        <span className={st.requiredIcon}>*</span>:
                                    </label>
                                    <input
                                        className={errors[key] ? st.invalidInput : ''}
                                        type="number"
                                        id={key}
                                        name={key}
                                        step={props[key] === props.cut ? 0.1 : 1}
                                        onChange={(e) => {
                                            const value = e.target.value;
                                            handleChangeForm(key, value === '' ? value : +value);
                                        }}
                                    />
                                </div>
                            );
                        })}
                        <div className={st.inputFieldText}>
                            {Object.keys(props).map((key) => {
                                if (props[key] !== props.f1 && props[key] !== props.f2) return <></>;
                                return (
                                    <div key={key} className={st.inputField}>
                                        <label htmlFor={key}>
                                            {props[key]}
                                            <span className={st.requiredIcon}>*</span>:
                                        </label>
                                        <input
                                            className={errors[key] ? st.invalidInput : ''}
                                            type="text"
                                            id={key}
                                            name={key}
                                            onChange={(e) => handleChangeForm(key, e.target.value)}
                                        />
                                    </div>
                                );
                            })}
                        </div>
                        <div className={st.btnWrapper}>
                            <button className={st.downloadBtn} onClick={handleDownLoad}>
                                Download
                            </button>
                            <button className={st.downloadBtn} onClick={handleOpenModalPreview}>
                                Preview
                            </button>
                        </div>
                    </div>
                </div>
                <div className={st.footer}>
                    <h5 className={st.text}>Powered by Phlybi ü§é Hmy üê≥</h5>
                </div>
            </div>
            <Modal isOpen={isModalOpen} onClose={() => setModalOpen(false)} title="Preview">
                <div className={st.modal}>
                    <ul>
                        {generateText().map((text, i) => (
                            <li key={text} className={(i + 1) % 3 === 0 ? st.lastLi : ''}>
                                {text}
                            </li>
                        ))}
                    </ul>
                </div>
            </Modal>
        </div>
    );
}
