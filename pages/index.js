import Head from 'next/head';
import st from '../styles/home.module.css';
import { useState } from 'react';

const G00 = 'G00';
const G01 = 'G01';
const G02 = 'G02';

export default function Home() {
    const [form, setForm] = useState({
        z: null,
        delta: null,
        limit: null,
    });
    const [errors, setErrors] = useState({});

    const convertObjectToString = (data) => {
        const lines = [];

        data.forEach((obj) => {
            for (const key in obj) {
                lines.push(`${key === G02 ? G00 : key} Z${obj[key]}`);
            }
        });

        return lines.join('\n');
    };

    const generateText = (input) => {
        const { z, delta, limit } = input;
        if (limit >= z) return;
        if (isNaN(z) || isNaN(delta) || isNaN(limit)) return;

        const result = [];
        let i = 0;
        let currentG00 = z;

        while (currentG00 > limit) {
            result.push({
                [G00]: !i ? z : currentG00 + 1,
                [G01]: currentG00 - delta,
                [G02]: z,
            });
            i++;
            currentG00 -= delta;
        }

        return convertObjectToString(result);
    };

    const handleDownLoad = () => {
        // Validate
        const newErrors = { ...errors };
        let invalid = false;
        Object.keys(form).forEach((key) => {
            if (isNaN(form[key])) {
                invalid = true;
                newErrors[key] = true;
            }
        });

        setErrors(newErrors);
        if (invalid) return;

        // Create a new Blob with the text content
        const blob = new Blob([generateText(form)], { type: 'text/plain' });

        // Create a temporary anchor element
        const link = document.createElement('a');

        // Set the download attribute with the provided filename
        link.download = 'CNC_Script';

        // Create a URL for the Blob and set it as the href attribute
        link.href = window.URL.createObjectURL(blob);

        // Append the anchor to the document body and trigger a click to download
        document.body.appendChild(link);
        link.click();

        // Clean up by removing the anchor and releasing the Blob URL
        document.body.removeChild(link);
        window.URL.revokeObjectURL(link.href);
    };

    const handleChangeForm = (prop, value) => {
        setForm((prev) => ({
            ...prev,
            [prop]: value,
        }));

        if (errors[prop]) {
            setErrors((prev) => ({ ...prev, [prop]: false }));
        }
    };

    return (
        <div className={st.container}>
            <Head>
                <title>CNC Script Auto</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className={st.wrapper}>
                <div className={st.header}>
                    <h1 className={st.text}>こんにちは、MarinƎs Haruki</h1>
                </div>

                <div className={st.main}>
                    <h3>Auto-generate CNC script tool</h3>
                    <div className={st.form}>
                        <label htmlFor="z">
                            Z<span className={st.requiredIcon}>*</span>:
                        </label>
                        <input
                            className={errors['z'] ? st.invalidInput : ''}
                            type="number"
                            id="z"
                            name="z"
                            onChange={(e) => handleChangeForm('z', +e.target.value)}
                        />
                        <label htmlFor="delta">
                            Delta<span className={st.requiredIcon}>*</span>:
                        </label>
                        <input
                            className={errors['delta'] ? st.invalidInput : ''}
                            type="number"
                            id="delta"
                            name="delta"
                            step={0.1}
                            onChange={(e) => handleChangeForm('delta', +e.target.value)}
                        />
                        <label htmlFor="limit">
                            Limit<span className={st.requiredIcon}>*</span>:
                        </label>
                        <input
                            className={errors['limit'] ? st.invalidInput : ''}
                            type="number"
                            id="limit"
                            name="limit"
                            onChange={(e) => handleChangeForm('limit', +e.target.value)}
                        />

                        <div className={st.btnWrapper}>
                            <button className={st.downloadBtn} onClick={handleDownLoad}>
                                Download
                            </button>
                        </div>
                    </div>
                </div>
                <div className={st.footer}>
                    <h5 className={st.text}>Powered by Phlybi</h5>
                </div>
            </div>
        </div>
    );
}
